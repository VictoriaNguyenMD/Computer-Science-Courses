#include <iostream>
using namespace std;

struct Node{
  char data = 0;
  Node* nxt = NULL;
};

class LinkedList{
  public:
    void append(char data);
    void insertBefore(char node, char data);
    void insertAfter(char node, char data);
    void print();
  private:
    Node* head = NULL;
    Node* tail = NULL;
};

void LinkedList::append(char val){
  Node* tmp = new Node;
  tmp->data = val;
  
  if(head == NULL){
    head = tmp;
    tail = tmp;
  }
  else{
    tail->nxt = tmp;
    tail = tmp;
  }
  
  
}

void LinkedList::insertAfter(char node, char data){
  Node* tmp = head;
  Node* insert_node = new Node;
  insert_node->data=data;
  char found = 0;

  while(tmp != NULL){
    if(tmp->data == node){
        Node* tmp2= tmp->nxt;
        tmp->nxt = insert_node;
        insert_node->nxt=tmp2;
        found = 1;
        break;
    }
    tmp = tmp->nxt;
  }
  
  if(head == NULL){
    head = tmp;
    tail = tmp;
    found = 1;
  }
  
  if(found == 0){
    cout << "Node not found. Cannot insert the node after " << node << ".";
  }
}



void LinkedList::insertBefore(char node, char data){
  Node* tmp = head;
  Node* insert_node = new Node;
  insert_node->data=data;
  char found = 0;
  
  if(head == NULL){
    head = tmp;
    tail = tmp;
    found = 1;
  }
  else{
    if (false) {
        
    }
    else {
        if (tmp->data == node) {
          head = insert_node;
          insert_node->nxt=tmp;
          found = 1;
        } 
        else {
          while(tmp->nxt!=NULL) {
              if (tmp->nxt->data == node){
                Node* tmp2= tmp->nxt;
                tmp->nxt = insert_node;
                insert_node->nxt=tmp2;
                found = 1;
                break;
              }
              tmp=tmp->nxt;
              
          }
        }
        
    }
  
  }
  if(found == 0){
    cout << "Node not found. Cannot insert the node after " << node << ".";
  }
}


void LinkedList::print(){
  Node* tmp = head;
  while(tmp != NULL){
    cout << tmp->data;
    tmp = tmp->nxt;
  }
}

int main() {
  LinkedList linked_list;
  linked_list.append('o');
  linked_list.append('m');
  linked_list.append('u');
  linked_list.append('t');
  linked_list.append('e');
  linked_list.insertBefore('o','c');
  linked_list.insertAfter('m','p');
  linked_list.insertAfter('e','r');
  linked_list.print();

  return 0;
}
